* 深入理解Java 虚拟机
* 1. 走进Java

* 2. Java内存区域与内存溢出异常
** 1. 运行时数据区域
*** 程序计数器     :线程私有
**** 因为是要记录命令执行位置的
*** Java虚拟机栈   :线程私有
**** 存储方法的相关信息,所以是私有的
***** 局部变量表,操作数栈,动态链接,方法出口
**** 进入方法后,方法所占的空间就可以被确定了
*** 本地方法栈     :线程私有
**** 用来存储本地方法的
*** Java堆        :线程共享
**** 堆所占空间最大
**** 存放对象实例
**** 堆管理方式
***** 指针碰撞:内存规整,类似于插入排序,有一条明显的界限
***** 空闲列表:指针方式规划内存
***** 哪种形式与GC有关
**** 分配内存时的同步问题
***** 进行同步处理
***** 或者将空间预分配给不同的线程,作为分配缓存
****** 通过 ~-XX:+/-UseTLAB~ 来进行设定是否开启
*** 方法区         线程共享:
**** 存储已被加载的类信息,常量,静态变量,即时编译器编译后的结果
**** 运行时常量池
** 2. 虚拟机中的对象
*** 对象的创建
1. 遇到一个 ~new ClassName()~
   1. 先检查类是否已经被加载 :: 就是通过类名与传入参数能不能在常量池中匹配到这个类的引用
      1. 如果没有,就为这个类执行类加载过程 :: 第七章
      2. 如果存在,就是已经完成了类加载检验过程
2. 为新生对象分配内存
   1. 所需大小可以完全确定
   2. 从Java堆中划分出一块空间
   3. 初始化整个空间
3. 初始化对象
   1. 设置对象头
      1. 类信息,类的元数据信息,对象的哈希值,GC分代年龄
      2. 虚拟机创建对象完毕
4. 执行<init>方法,也就是最外层的初始化

*** 对象的内存布局
**** 对象头 : 相当于额外存储信息
***** Mark Word,用于存储运行时数据
****** 哈希值,GC分代年龄,锁状态标志,线程持有锁,偏向线程ID,偏向时间戳
***** 类型指针
****** 指向类元数据的指针,用于确定对象所属类 : 并不是必须的,看虚拟机的实现
***** 如果是数组,需要记录数组的长度,否则无法从堆中划分内存
****** 数组不知道长度就无法确认大小
**** 实例数据 
***** 就是对象中实际的的信息
**** 对齐填充
***** 用来进行填充的,很常见
*** 对象的访问定位
**** 句柄形式
***** 在Java堆中划分出一个句柄池
***** 相当于栈指向句柄,句柄指向堆实例与方法区中的常量池(类信息)
**** 直接指针形式
***** 直接指向堆中的实例,实例自带指向方法区中常量池的指针
* 3. 垃圾收集器与内存分配策略
* 4. 虚拟机性能监控与故障处理工具
* 5. 调优案例分析与实战

* 6. 类文件结构
* 7. 类加载机制
* 8. 虚拟机字节码执行引擎
* 9. 类加载及执行子系统的案例与实战
* 10. 早期(编译期)优化
* 11. 晚期(运行期)优化
* 12. Java内存模型与线程
* 13. 线程安全与锁优化
