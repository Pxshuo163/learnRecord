* Git学习分支

[[https://learngitbranching.js.org][学习Git分支网址]]

* 基础篇

Git主要命令

** 1. ~Git Commit~

+ 概念
  + Git 提交的记录属于快照
+ 命令
  + ~git commit~
+ 练习
  1) 提交两次
  2) c0 <- c1 <- c2 <- c3

** 2. ~Git Branch~

+ 概念
  + 分支同样是轻量级的操作
+ 命令
  + ~git branch <branch-name>~ :: 创建一个分支
  + ~git checkout <branch-name>~ :: 切换到那个分支
  + ~git checkout -b <branch-name>~ :: 创建并切换到那个分支
+ 练习
  1) 创建一个bugFix并切换到这个分支中


** 3. ~Git Merge~

+ 概念
  + 合并分支后的提交记录包含了两个父节点
  + 当前分支合并其他分支
    + 当前分支创建了新的提交
    + 其他分支并未改变
+ 命令
  + ~git merge <target-branch-name>~ :: 合并分支
+ 练习
  1) 创建新的分支 ~bugFix~
  2) 切换到 ~bugFix~
  3) 提交一次
  4) 切换回 ~master~
  5) 再提交一次
  6) 将 ~bugFix~ 合并到 ~master~

** 4. ~Git Rebase~

+ 概念
  + 同样是用于合并分支
  + 取出一系列的提交记录，复制并在另一个地方逐个的放进去
  + 可以创建更加线性的提交历史，使提交历史变得更加清晰 [0/1]
    + [ ] 如何在pull/push时使用这种方式呢
  + 合并后原来的节点还是存在的
+ 命令
  + ~git rebase <target-barnch-name>~ :: 将本分支合并到目标分支上去
    + 在目标分支的后面
    + 原来的节点还是存在的
+ 练习
  1) 新建并切换到 ~bugFix~ 分支
  2) 提交一次
  3) 切换回 ~master~ 分支再提交一次
  4) 切换到 ~bugFix~ 分支， ~rebase~ 到 ~master~
  5) 切换到 ~master~ 分支， ~rebase~ 到 ~bugFix~ ，同步 ~master~

* 高级篇
  :LOGBOOK:
  CLOCK: [2018-04-17 周二 14:08]
  :END:

Git一些炫酷的特性

** 1. *分离* ~HEAD~

+ 概念
  + ~HEAD~ :: 当前检出记录的符号引用，类似于 ~current~ 的概念
    + 指向 *当前分支* 的 *最近一次* 提交记录
    + 大部分修改提交树的 ~Git~ 命令是从改变 ~HEAD~ 的指向开始的
    + ~HEAD~ 可以指向提交记录，也可以指向具体的分支
      + ~HEAD -> master -> C1~
      + ~HEAD -> C1 <- master~
    + ~HEAD~ 好像就是那个表示当前的 ~*~
+ 命令
  + ~cat .git/HEAD~ :: 查看 ~HEAD~ 的指向
  + ~git symbolic-ref HEAD~ :: 当 ~HEAD~ 指向一个引用，可以通过这个查看它的指向
  + ~git checkout <Record-name>~ :: 将 ~HEAD~ 指向当前的纪录 
+ 练习
  + 从 ~bugFix~ 分支中分离出 ~HEAD~ 并让其指向一个提交记录
    + 可以跨越分支直接跳到对应的记录上
  + 结构
    - ~C0 <- C1~
      - ~<- C2 <- master*~
      - ~<- C3 <- C4 <- bugFix~

** 2. 相对引用 /(^)/

+ 概念
  + Hash值的方式不是很方便，所以引出相对引用的概念
    + 可以从一个容易记忆的位置进行计算
  + [ ] 如何向后移动呢？
+ 命令
  + ~git checkout master^~ :: 引用的使用方式[1]
    + 修改HEAD：就是将那个记录检出
  + ~git log~ :: 查看提交记录的hash值
    + 用的时候使用前几位可以标识出唯一记录的就可以
  + ~^~ :: 向上移动一个提交记录
    + ~master^~ :: 查看 ~master~ 的父节点
      + ~git checkout master^~ :: 使用方式
    + ~master^^~ :: 查看祖父节点 
  + ~~<num>~ :: 向上移动多个提交记录，如： ~~3~
+ 练习
  + 切换到 ~bugFix~ 的父节点，尽量使用相对引用
  + 结构
    - ~C0 <- C1~
      - ~<- C2 <- master*~
      - ~<- C3 <- C4 <- bugFix~

** 3. 相对引用2 /(~)/

+ 概念
  + 相对引用可以用于移动分支
  + 也就是让分支重定位
    + [ ] 不知道强制回退能否找到之前的最新数据，应该可以的吧
    + 需要使用 ~-f~ 参数，表示有风险的吧
    + 可能是表示移动分支
+ 命令
  + ~git branch -f master HEAD~3~ :: 引用的使用方法[2]
    + 修改分支：就是重置分支
  + ~~~ :: 后面不加数字，等同于 ~^~
  + ~git branch -f master HEAD~3~ :: 将 ~master~ 分支强制指向 ~HEAD~ 的第三级父亲提交 
+ 练习
  + 将 ~HEAD master bugFix~ 移动到指定[]的位置
    + 会用到一次直接引用 ~C6~
  + 结构
    - ~C0[bugFix] <- C1[HEAD]~
      - ~<- C2~
        - ~<- HEAD~
        - ~<- C4 <- master*~
      - ~<- C3 <- C5~
      - ~<- bugFix~
      - ~<- C6[未创建][master]~

** 4. 撤销变更

+ 概念
  + 由底层部分和上层部分组成
+ 命令
  + ~git reset HEAD~1~ :: 本地代码库就不知道有刚才的那个提交了
    + 变更还是存在于工作区，但没有进入暂存区
  + ~git revert HEAD~ :: 增加了一个提交 ~C2`~ ，将 ~C1~ 的引用拷贝了过来， ~C2`~ 的状态与 ~C1~ 的状态是相同的
    + ~C0 <- C1 <- C2 <- master*~
    + 这样可以将更改提交到远程
+ 练习
  + 撤销 ~local~ 本地分支和 ~pushed~ 远程分支
  + 结构
    - ~C0 <- C1~
      - ~<- master~
      - ~<- C2 <- pushed~
      - ~<- C3 <- local*~

* 移动提交记录

自由修改提交树

** 1. ~Git Cherry-pick~

** 2. 交互式 ~rebase~

* 杂项

技巧与贴士大集合

** 1. 只取一个提交记录

** 2. 提交的技巧 /#1/

** 3. 提交的技巧 /#2/

** 4. ~Git Tag~

** 5. ~Git Describe~

* 高级话题

过于高深的东西

** 1. 多次 ~Rebase~

** 2. 两个父节点

** 3. 纠缠不清的分支

* Push & Pull -- Git 远程仓库

使编码社交化

** 1. ~Git Clone~

** 2. 远程分支

** 3. ~Git Fetch~

** 4. ~Git Pull~

** 5. 模拟团队合作

** 6. ~Git Push~

** 7. 偏离提交历史

* 关于 origin 和它的周边 -- Git 远程仓库高级操作

独裁控制仓库

** 1. 推送主分支

** 2. 合并远程仓库

** 3. 远程追踪

** 4. ~Git Push~ 的参数

** 5. ~Git Push~ 的参数2

** 6. ~Git fetch~ 的参数

** 7. 没有 ~source~ 的 ~source~

** 8. ~Git Pull~ 的参数

