* Spring的IOC容器-XML与Spring和Web的整合

本质上是管理bean

** Spring框架

+ Spring核心
  + 控制反转：IOC
    + 管理对象，可以解耦
    + 方便解耦，简化开发
  + 面向切面：AOP
    + 权限以及事务的实现
    + 声明式事务的支持

** IOC核心功能

+ 控制反转
  + 将对象创建的权力交给Spring
  + 也就是new一个对象不在代码中实际的体现出来，而是Spring将其封装起来，便于修改与生成
  + 向外提供了高效的接口
+ Spring结构
  + 最上层
    + 数据访问
      + JDBC
      + ORM
      + OXM
      + JMS
      + Transactions
    + Web
      + WebSocket
      + Servlet
      + Web
      + Portlet
  + 中间层
    + AOP
    + Aspects
    + Instrumentation
    + Messaging
  + 核心层
    + Beans
    + Core
    + Context
    + SpEL
  + 底层
    + Test
+ 使用方式
  1. 创建工厂，加载核心配置
  2. 从工厂中获取对象
  3. 调用方法执行
+ 配置文件
  + 头部可以自行设置本地
+ 配置文件
  + beans
    + bean
      + id
      + name-用于兼容，没什么用
      + class
      + scope
        + singleton-*
        + prototype-*struct2中的action多例，线程不安全
        + request
        + session
        + globalsession
      + init-method:初始化销毁方法
+ 控制反转和依赖注入
  + 控制反转表示将对象的创建操作交给他人
  + 依赖注入表示将需要的新对象从他人那里获取
+ xml注入方式
  + bean
    + name确定唯一的对象
    + class确定唯一的类
    + property--set注入
      + name找到类中的成员
      + ref找到相应的对象
    + constructor-arg:构造注入
  + 数组、集合等注入
    + property
      + list
      + map
        + entry
      + props
        + prop
+ 配置文件拆分
  + import
    + resource
+ 整合
  + 添加spring-web
  + 配置spring的监听器
  + 使用WebApp...工厂，通过servletContext进行处理

* Spring的IOC容器的注解形式，AOP技术
  :LOGBOOK:
  CLOCK: [2018-04-07 周六 14:42]--[2018-04-07 周六 16:08] =>  1:26
  :END:

** IOC的注解方式

+ 注解需要的包
  + 需要AOP相关的包
+ 注解相关
  + Component
    + 组件注解，表示是一个bean，类路径可以自行读取，id可以使用value配置
    + 衍生注解：4.X没有什么区别
      + Controller
      + Service
      + Repository
  + 属性注入
    + @value:基本类型，可以省略set方法
    + @Autowired：自动注入
    + @Qualifier：按照名称注入
      + @Resource(name):Java注解，Spring支持这种方式
  + @Scope
    + 设置单例与多例
  + Bean作用范围与生命周期
    + @PostConstruct:init-method
    + @PreDestory
  + JUnit的整合
    + RunWith:SpringJUnit4ClassRunner.class
    + ContextConfiguration("classpath:ac.xml")
    + @Autowired
    + @Test

** 使用AOP对Dao进行增强
   :LOGBOOK:
   CLOCK: [2018-04-07 周六 16:52]--[2018-04-07 周六 18:57] =>  2:05
   :END:


+ 概念
  + 面向切面编程
  + 通过预编译方式和运行期动态代理的方式实现对程序功能进行统一维护的技术
  + 隔离业务逻辑，降低耦合性，提高可重用性
  + 思想
    + 模块化
    + 横向抽取，取代了纵向继承的方式
  + 用于
    + 性能监视
    + 安全检查
    + 事务管理
    + 缓存
+ 底层实现
  + 动态代理：代理服务器，对请求与返回结果进行包装
    + JDK：要求有接口
      + InvocationHandler
      + 匿名内部类
        + 外部对象需要final修饰
        + 执行方法：method.invoke(obj, args)
    + cglib技术：没有接口，采用生成子类的方式
+ 接口
  + 加接口就可以更好的进行AOP
  + service-impl-dao-impl-test
+ 基于AspectJ的AOP-实用性的AOP
+ 术语
  + Joinpoint（连接点）
    + 类中所有的方法，就是可以被拦截的地方
    + 可以被增强的地方
  + Pointcut（切入点）
    + 需要增强的那个方法
  + Advice（通知/增强）
    + 增强的方法，需要自定义
  + Introduction（引介）
  + Target（目标对象）
    + 被增强的对象
  + Weaving（织入）
    + 生成动态代理的过程
      + cglib是加载的时候，jdk是执行的时候
  + Proxy（代理）
    + 获取增强对象的过程
  + Aspect（切面）
    + 切入点与通知的统称
+ AOP
  + 需要aspect的jar
  + 自定义一个类用于增强：普通的就可以
  + 在xml中配置为bean
  + 使用aop:config进行设置
    + aop:aspect添加增强的bean引用
      + aop:before中通过method调用增强方法，pointcut找切入点
  + 通过接口调用bean，不要通过实现类
+ 切入点的表达式
  + ~execution(public void com.pxshuo.aop.xml.UserDaoImpl.save())~
  + 规则
    1) execution：必须有
    2) public：可以不写
    3) void:可以确定唯一的方法，必须要有，可以使用*代替
    4) 包名：可以使用*代替,必须要有
       - *代表一层
       - ~*..*~ 代表多层：*..*.UserDaoImpl.save()
    5) 类名：*DaoImpl：后缀的方式
    6) 方法：save*()：以save为前缀
    7) 参数：save(..):任意参数
       - save(*):一个参数
+ 通知类型
  + 前置通知
    + 方法之前
    + 比如参数校验
  + 后置通知-after-returning
    + 方法之后
    + 比如修改返回值
  + 最终通知-after
    + 出现异常也会通知
    + 比如资源释放
    + 最终通知与后置通知的顺序和在配置文件中的顺序一致
  + 环绕通知
    + 之前之后都会通知
  + 执行顺序
    + 前置在后置和最终之前执行
    + 后置与最终的执行顺序和配置的顺序一致
    + 环绕包含前置与后置，执行顺序与配置顺序一致
      + 编号：1：前置-1，2：后置-2，3：最终-3，4：环绕-4a，4b
      + 记录:配置+结果
        + 1-2-3
          + 1-2-3
        + 1-3-2
          + 1-3-2
        + 1-2-3-4
          + 1-4a-4b-3-2：栈
        + 1-2-4-3
          + 1-4a-3-4b-2：栈
        + 1-4-2-3
          + 1-4a-4b-2-3：正规
        + 4-1-2-3
          + 4a-1-4b-2-3:正规
+ AOP注解形式
  + xml
    + 增强类的bean
    + 开启自动代理：
      + ~<aop:aspectj-autoproxy>~
  + 增强类
    + @Aspect：类上
    + @Before(value=execution...):方法上，aspect中的注解
+ 通知类型和通用切入点
  + 自定义切入点
    + 添加方法：mypoint
      + 方法上添加注解 ~@Pointcut(value="execution")~
    + 使用方法： ~@Before(value="MyAnno.mypoint()")~


* Spring的事务管理，JDBC模板

** JDBC模板

+ JdbcTemplate
  + 先创建数据库连接池
    + 传入驱动、数据库链接、用户名、密码
  + 将连接池传入模版中
    + 之后使用即可
+ Spring管理
  1) 将新建的操作交给bean
  2) 将传入参数交给注入即可
  3) 切换数据库连接池只需要修改配置文件即可
+ 数据库分页
  + ~limit 20, 30~
  + 分页参数：pageSize,pageNumber,totalPage,totalNumber

** 事务管理

+ 相关类和API
  1) ~PlatformTransactionManager~ 接口
     1) 平台管理器-使用这个进行管理
     2) 实现类
        1) 很多
        2) DataSourceTransactionManager等等-普通
        3) HibernateTransactionManager-Hibernate框架
     3) 常用接口
        1) ~void commit(status)~
        2) ~TransactionStatus getTransaction(defintion)~
        3) ~void rollback(TransactionStatus status)~
  2) ~TransactionDefinition~ 接口
     1) 事物定义信息-用这个进行初始化定义
     2) 设置隔离级别
     3) 设定事务的传播级别
  3) ~TransactionStatus~ 接口
     1) 事物的状态-用这个保存状态
     2) 事物的传播行为
        1) 两对事务如何合并
        2) 一般用默认值
           1) 一组：保证AB在同一个事务中
           2) 二组：保证AB不在同一个事务中
           3) 三组：A执行后设置一个回滚点，B可以回滚到一开始，也可以回滚到这里
+ 实现
  + Service层
    + 执行in，out
  + Dao层
    + 可以继承JdbcDaoSupport自动注入JdbcTemplate类
      + support中提供如果没有模版可以自行创建模版，但是需要提供dataSource
        + 这样就可以省去模板的配置
  + 查看事务
    + 在in out之间抛出异常(10/0),查看事务是否完整
+ 事务管理 ： 在业务层添加事务 
  + 手动编程：不需要
    + [都需要]配置平台事务管理器，需要注入连接池：需要连接来管理实务
    + 使用模板类TransactionTemplate ： 注入平台管理器
    + 把模版注入到对应的Service类中
    + 通过execute方法执行事务，和动态代理类似，回调函数使用外部变量时，外部变量需要用final修饰
  + 声明形式：一般使用的方式
    + XML形式
      + 先配置增强类：官方
        + ~tx:advice~ 配置id与事务平台管理器
          + ~tx:attributes~
            + ~tx:method~ 配置事务作用的方法
            + 可以有多个
      + 再配置AOP切面
        + ~aop:config~
          + ~aop:advisor~ pointcut advice专用的切面配置，自定义使用aspect即可
+ 注解形式
  + 开启注解事务
    + ~tx.annotion-driven transaction-manager=""~
  + 在对应的类或者方法上添加 ~@Transaction~ 注解

+ Eclipse
  1. 统一工作空间编码：utf-8
  2. jsp编码：utf-8
  3. 配置Tomcat服务器
     1. 服务器界面，右键open
     2. server Location 使用Tomcat的工作空间
     3. 修改deply path：wepapps
  4. SSH配置文件
     1. 可以自己加约束
      

* 框架整合
