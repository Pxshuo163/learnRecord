* 1. Java容器 [4/8]

** DONE 1.1 Hash冲突解决手段 <<1.1>>

1. 开放定址法
   1. 就是遇到冲突重新执行Hash,选定另外的位置
2. 链表法
   1. 这个就是数组链表结构的解决方案

** DONE 1.2 ArrayList中成员数组不序列化问题 <<1.2>>

由于序列化时不需要序列化多余的数组容量,所以是由ArrayList自行处理

** TODO 1.3 HashMap链表插入策略
  
** DONE 1.4 HashMap扩容问题 <<1.4>>

1. Hash位置计算公式为: ~i = (capacity - 1) & hash~
   1. 以 ~capacity = 16~ 为例, ~16 = 10000~ ,所以 ~capacity-1 = 01111~
   2. 与hash做&操作,表示只取hash中后四位作为标识
   3. 也就是 ~0xxxx~ 与 ~1xxxx~ 都存在位置 ~i1~ 上
2. 当Hash扩容之后,rehash的计算公式为 ~i = capacity & hash~
   1. 按照原来的算法,计算公式应该为 ~i = (capacity * 2 - 1) & hash~
   2. 也就是 计算 ~11111~, hash的后五位
   3. 但是由于第一次的hash计算使得后四位相同key分布在同一个位置,所以在遍历每个链表的过程中,只分辨倒数第五位就可以进行rehash了
   4. 也就是将 ~0xxxx~ 留在原地
   5. 将 ~1xxxx~ 放到 ~i = i1 + capacity~ 上去即可
      1. ~0xxxx = i1~
      2. ~1xxxx = capacity~
      3. ~1xxxx = i1 + capacity~
  
** TODO 1.5 HashMap线程安全

** TODO 1.6 HashMap源码注解

** DONE 1.7 HashTable <<1.7>>

1. 已经过时了,不再有人用了
2. HashTable支持同步机制,是线程安全的
3. HashTable中键值都不可以为空的

** TODO 1.8 CocurrentHashMap原理


* TODO Spring [0/2]

** TODO Spring通常配置

** TODO Spring事务与AOP配置

* TODO 设计模式复习 [0/3]

** TODO 设计模式复习

** TODO 设计模式类图

* TODO 其他 [0/1]

** TODO Webservice
 
