* File类相关

+ 路径
  + 相对路径 :: eclipse相对路径为项目路径
    + 感觉像是src
+ 构造函数
  + ~File(String pathname)~
  + ~File(String parent, String child)~
    + 相当于拆分字符串
  + ~File(String parent, String child)~
+ 相关功能
  + 创建文件夹
    + mkdir
    + mkdirs :: 创建多级文件夹,C:/a/a1/a2/a3
  + 创建文件
    + createNewFile
  + 删除文件夹
    + 文件夹必须是空的
  + 获取功能
    + 路径
    + 长度
    + 修改时间
    + 所有文件或文件夹的名称数组和文件数组
      + 只获取一级,递归的形式反复获取
  + 文件过滤器 :: FileNameFilter
    + 类似于比较器

* IO流

+ 分类
  + 按照流向
    + 输入流
    + 输出流
  + 按操作类型
    + 字节流 :: 操作任何的数据
    + 字符流 :: 操作字符数据比较方便
  + 字节流抽象父类
    + InputStream
    + OutputStream
  + 字符流抽象父类
    + Reader
    + Writer
+ 操作规范
  + 使用前:导包
  + 使用时:异常处理
  + 使用后:释放资源
    
** 字节流

+ InputStream : read()
  + 每次执行时,从硬盘上读取一个字节
  + 类似于迭代器,在结束时读取-1.之后不会再进行前进(不会越界)
  + [ ] 为什么用int接收
    + 主要时识别-1
    + byte的-1为11111111
+ OutputStream
  + writer()
    + new对象的时候直接创建文件
    + 如果已经存在,则清空
  + 追加
    + ~FileOutputStream(file, true);~
+ 拷贝
  + 逐个字节拷贝 :: 很慢
    + ~b=fis.read()~
    + ~fos.write(b)~
  + available :: inputStream,就是一次性读取
    + 一次性可以读取的最多的字节的长度
    + 这样就可以构建数组,一次性读取多个,一次性写入多个
    + ~int[] arr = new int[fis.available()]~ :: 一般不推荐,推荐的长度为1024 * n
    + ~fis.read(arr)~ :: 将内容写入数组中
    + ~fos.write(arr)~
  + [ ] 小数组拷贝
    + ~int len = fis.read(arr) != -1~
    + ~fos.write(arr, 0, len)~
+ [ ] BufferIn/OutputStream,通过缓冲区使其速度更快 : 传入参数InputStream
  + 对输入流和输出流进行包装
    + ~b = bis.read() != -1~
    + ~bos.write(b)~
  + 将读与写的操作封装了起来
    + 原来的时每次read()与write()都会执行系统的IO操作
    + 封装后 :: 装饰者模式
      + read先读取8096个,每次read从数组中返回一个
        + 表现得和之前一样,但是并没有每次都执行IO
      + write每次只是现将b写入到缓冲数组中,当缓冲数组满了的时候才执行一次IO
        + 这样表现得和之前一样,但是效率却提高了
  + 相比于小数组的形式,多了一次O(n)的写入操作
  + Flush与Close
    + close
      + 关闭之前刷新一次缓冲区,会将没满的数组写入文件中去
    + flush
      + 刷新之后不可以继续写
      + 刷新时写入文件中,然后把数组清空
      + 用于实时场景
+ 字节流读写中文
  + 读
    + ~read(arr)~
    + ~new String(arr)~
    + 难以转成相应的文字容易乱码
  + 写
    + ~write(str.getBytes())~
+ 异常处理
  + 1.6
    + try嵌套
      + 在finally中添加try-finally
      + 尽量关闭所有的流
  + 1.7
    + try(流初始化)
    + {流操作}
    + 不用finally关闭,这种结构可以自动关闭
    + 实现AutoCloseAble接口
+ 亦或操作,如果执行同一个位置则会变0
  + 不是相同的数字
  + 0^0=0,1^1=0
  + 0^1=1^0=1
+ 录入数据写入文件
  + 每次想要写入的时候,需要flush进行提交

** 字符流

+ read()返回值为int
  + 强制转型为char即可
+ write()
  + 可以直接写字符串
  + fileWriter自动包含缓冲区
    + 长度2k
  + writer需要关流
+ 使用场景
  + 读入或者写出一段文本的时候使用
  + 拷贝的时候不需要,本质上使用字节即可
    + 不可以拷贝非纯文本文件
      + 字节转换字符的时候可能出现精度丢失
+ 自定义字符数组的拷贝
  + 由于不知道使用何种编码,所以即使知道文件的大小,但也不能获知字符数组的大小,也就不能用大数组拷贝了
    + 字节流是可以知道字节数组的大小的,字符流无法确认
  + 所以只能用小数组的形式去完成:1024的整数倍即可
+ ~new BufferedReader(new FileReader)~ :: 装饰器
  + readLine()
    + 返回一行,但不包括换行符,结束为null
  + newLine()
    + 写入一个换行符
    + 跨平台的方法
    + ~\r\n~ 只在Windows上的,Ubuntu为 ~\n~ mac为~\r~
+ LineNumberReader
  + getLineNumber
  + setLineNumber :: 默认为0,每次readLine, ~lineNumber++~
    + 可以设定初始值

** 装饰设计模式

+ 对原类的功能进行封装增强
  + 通过获取原类的引用来进行增强
  + 在构造时获取实例
+ 增强类不会随原类改变而改变
+ 增强类可以同时拥有多个原类

*** 选择码表

+ InputStreamReader
  + 也是一个装饰类
  + 是属于字符流

*** 试用版软件

+ 处理同一个文件时,不要事先创建writer实例,会清空
  + 用添加的方式就难以清空了

*** 递归

+ 会造成栈溢出
  + 尾递归应该可以解决的么
    + 尾递归是指return时不使用表达式只返回调用自身
+ 构造方法无法递归

** 序列流

不是很重要

+ 将多个字节输入流整合成一个
+ SequenceInputStream
  + 传入两个FileInputStream,将两个合并成了一个文件进行读取
  + 整合多个的时候,使用枚举进行整合
    + 传入Vector中去:使用Vector获取枚举

** 内存输出流

重要

+ 向内存中写数据,将内存作为一个缓冲区,写出之后一次性获取所有的数据
+ ByteArrayOutputStream
  + 写到内存中,相当于写到了数组中
  + 实际上就是创建了一个动态byte数组
  + 不需要close
    + 因为这个不涉及IO操作

** 对象操作流

+ 执行序列化与反序列化操作
  + 序列化写出
  + 反序列化读入
+ ObjectOutputStream
  + 一种装饰器
  + 传入FileOutputStream
  + 对象需要Serializable
+ 读取时可能越界
  + 解决方案,统一存到数组中进行保存,取出时取出数组即可
+ 添加ID号
  + 相当于版本号
  + 相当于版本控制
  + 不写的话时随机的版本号
  + 在每次修改时改变ID

** 打印流

只用于写入功能

+ println :: 字节流
  + 就是System.out,默认指向控制台
+ PrintWriter :: 字符流
  + 存在一个小的缓冲区
  + 自动刷出只针对println,换行时自动刷新缓存
  + 没啥用
+ 标准输入输出 :: 修改流的输入输出位置
  + System.setIn
  + System.setOut
+ 输入流
  + 不需要关闭
  + 单例,关闭之后无法再次使用

** 随机访问流

+ RandomAccessFile :: 字节流
  + Object的子类,但封装了InputStream与OutputStream的功能
  + 支持对随机访问文件的读取与写入
  + mode
    + r :: read
    + rw :: read and write 
+ read
+ write
+ seek
  + 设定指针的位置
+ 用于多线程下载

** 数据输入输出流 

+ 按照基本数据类型大小读写数据
+ DataOutputStream

** Properties

+ HashTable
  + 默认为string类型
+ setProperty,get
+ load,store
  + load :: 输入
  + store :: 输出,可以添加描述,就是git commit中的 -m

* 总结

+ Stream 是字节流
+ Reader 时字符流
+ 没有关联文件(没有IO操作)就可以不用关闭

** 可做练习

+ 字节流
+ 字符流
+ 序列流
+ 内存输出流
+ 对象操作流
  + 将一组对象写入文件并读取出来
  + 文件末尾异常:
+ 打印流 :: 意义不大,只是可以这么做
  + 改变输入流输出流的指向
  + 拷贝一份文件
  + 再尝试使用BufferReader
+ 随机访问流
  + 多线程拷贝
+ 数据输入输出流
  + 基本类型的输入输出
+ Properties

** 其他练习

+ 统计文件夹大小
  + 文件.length
+ 按照层级打印
  + tab:\t
+ 将一个文件夹中的内容拷贝到另一个文件夹 
  + 要避免拷贝到子文件,拷贝到同一个文件夹中会无限循环
+ 删除一个文件夹

** IO练习

+ [-] IO [2/3]
  + [X] 字节流 [2/2]
    + [X] 基本拷贝的三种形式
    + [X] 提供的快速拷贝
  + [X] 字符流 [5/5]
    + [X] 文件拷贝
    + [X] 逐行拷贝
    + [X] 拷贝行号
    + [X] 编码拷贝
    + [X] 处理同一个文件
  + [-] 其他流 [6/7]
    + [X] 多个同时拷贝
    + [X] 读取到内存
    + [X] 对象序列化与反序列化
    + [X] 修改输入输出源
    + [ ] 多线程读写文件 TODO
      + [ ] 线程池
      + [ ] 线程结束回调
    + [X] 按照基本数据类型大小读写
    + [X] 输入输出配置文件
+ [X] 文件 [4/4]
  + [X] 统计文件夹大小
  + [X] 层级打印
  + [X] 拷贝文件夹
  + [X] 删除拷贝的文件夹
