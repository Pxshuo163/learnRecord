* 学习数据库索引

** 解决问题

1. 为什么要给表加上主键
2. 为什么加索引后查询会变快
3. 为什么加索引后会使修改变慢
4. 什么情况下要同时在两个字段上建立索引
5. 平衡树 (balance tree)

** 索引创建规则

+ 查询语句
  + ~select user_name from user_info where birthday = '1991-11-1'~
+ 建立索引
  + ~create index index_birthday on user_info(birthday);~
  + 查询时,先通过非聚合索引查找到对应的ID,再通过聚合索引查找具体的数据
+ 双字段覆盖索引
  + ~create inde index_birthday_and_user_name on user_info(birthday, user_name);~
  + 查询时,直接通过索引找到生日对应的节点,该节点中除了主键也保存了姓名信息,可以直接返回回来

** TODO 表与主键,索引

+ 表与主键
  + 表加上主键之后,就变为了平衡树存储结构
  + 也就是 *聚集索引* ,一个表只能有一个聚集索引
  + 优势
    + 使用B-Tree,可以将查询从O(n)变为O(logn),以树的分叉数为底,记录总数的对数
  + 劣势
    + 每次增删都需要重新更新索引
+ 聚集索引与非聚集索引,覆盖索引
  + 通过 *聚集索引* 可以查到具体的数据
  + 通过 *非聚集索引* 只能查到记录对应的主键
  + *覆盖索引* 的叶子节点中除了保存主键之外,也会保存联合的数据[具体如何联合的并不清晰][TODO]

